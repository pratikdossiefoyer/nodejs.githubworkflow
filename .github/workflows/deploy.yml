name: Deploy to Server
on:
  push:
    branches: [ main ]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Create env file
        run: |
          echo "PORT=${{ secrets.PORT }}" > .env
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
      
      - name: Build package for deployment
        run: |
          npm run build || echo "No build script found, skipping build step"
          # Create a deployment package
          mkdir -p deployment
          cp -r src/ deployment/ || true
          cp -r dist/ deployment/ || true
          cp -r build/ deployment/ || true
          cp package.json deployment/ || true
          cp package-lock.json deployment/ || true
          cp .env deployment/ || true
          
      - name: Create deployment archive
        run: |
          tar -czf deployment.tar.gz deployment/
          
      - name: Deploy via alternative method
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "deployment.tar.gz"
          target: "~/"
          
      - name: Remote deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p ~/nodejs-mongo-api
            tar -xzf ~/deployment.tar.gz -C ~/
            cp -r ~/deployment/* ~/nodejs-mongo-api/
            rm -rf ~/deployment ~/deployment.tar.gz
            cd ~/nodejs-mongo-api
            npm install --production
            # Install PM2 if not already installed
            command -v pm2 || npm install pm2 -g
            # Start or restart the application
            pm2 restart nodejs-mongo-api || pm2 start src/app.js --name nodejs-mongo-api
